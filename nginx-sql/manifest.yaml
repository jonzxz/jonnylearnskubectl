apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.name: nginx-example
  name: nginx-example
spec:
  replicas: 2
  selector:
    matchLabels:
      app.name: nginx-example
  template:
    metadata:
      labels:
        app.name: nginx-example
    spec:
      containers:
        - image: nginx:latest
          name: nginx-hello
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-www
              mountPath: /usr/share/nginx/html
      # minikube mount required, minikube mount ./html:/host/www
      volumes:
        - name: nginx-www
          hostPath: 
            path: /host/www
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service.name: nginx-service
  name: nginx-service
spec:
  type: ClusterIP
  selector:
    name: nginx-example
  ports:
      - protocol: TCP
        port: 80
        targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    ingress.name: nginx-ingress
  name: nginx-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: localhost
      http: 
        paths:
        - backend:
            service:
              name: nginx-example
              port:
                number: 80
          path: /
          pathType: Prefix
# Database
---
## Secret
apiVersion: v1
kind: Secret
metadata:
  name: sql-secret
type: kubernetes.io/basic-auth
stringData:
  password: Pa$$w0rd1
---
## SQL deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.6 
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sql-secret
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-initdb-config
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb-config
          configMap:
            name: mysql-initdb-config
---
## SQL Initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE database hello;
    USE hello;
    CREATE TABLE hello (id INT, title VARCHAR(256));
    INSERT INTO hello VALUES (1, 'hello world');