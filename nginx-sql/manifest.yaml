apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-counter
  labels:
    run: nginx-counter
spec:
  selector: 
    matchLabels: 
      run: nginx-counter
  replicas: 2
  template:
    metadata:
      labels:
        run: nginx-counter
    spec:
      containers:
        - image: nginx:latest
          name: nginx-counter
          env:
            - name: FIRST_NAME
              value: JonathanKerk
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-www
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              mountPath: /tmp/nginx/conf.d
          command: ["/bin/sh", "-c"]
          # args: ["envsubst < /etc/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]
          # TODO
          args: ["envsubst < /tmp/nginx/conf.d/default.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]
      volumes:
        - name: nginx-www
          hostPath: 
            path: /host/www
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: default.conf
                path: default.conf
---
apiVersion: v1 
kind: Service
metadata:
  name: nginx-counter-service
  labels:
    run: nginx-counter
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  type: LoadBalancer
  selector:
    run: nginx-counter
---
## NGINX override
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  default.conf: |
    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            # TODO
            sub_filter 'Increment and Decrement counter' 'Increment and Decrement counter - $FIRST_NAME';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }

# Database
---
## Secret
apiVersion: v1
kind: Secret
metadata:
  name: sql-secret
type: kubernetes.io/basic-auth
stringData:
  password: Pa$$w0rd1
---
## SQL deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.6 
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sql-secret
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-initdb-config
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb-config
          configMap:
            name: mysql-initdb-config
---
## SQL Initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE database hello;
    USE hello;
    CREATE TABLE world (id INT, title VARCHAR(256));
    INSERT INTO world VALUES (1, 'hello world');